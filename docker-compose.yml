version: "3.5"
services:
  angular:
    image: ghcr.io/revature-reverse/angular:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rev-angular.rule=HostRegexp(`{host:.*}`)"
  discovery:
    image: ghcr.io/revature-reverse/discovery:latest
    restart: unless-stopped
    environment:
      EUREKA_URI: 'http://discovery:8083/eureka'
      EUREKA_PATH: 'discovery'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rev-discovery.rule=HostRegexp(`{host:.*}`) && (PathPrefix(`/eureka`) || PathPrefix(`/discovery`))"
      - "traefik.http.routers.rev-discovery.middlewares=rev-discovery-auth"
      - "traefik.http.middlewares.rev-discovery-auth.basicauth.users=${DISCOVERY_USER}"
  gateway:
    image: ghcr.io/revature-reverse/gateway:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rev-gateway.rule=HostRegexp(`{host:.*}`) && PathPrefix(`/backend`)"
      - "traefik.http.routers.rev-gateway.middlewares=rev-gateway-prefixes"
      - "traefik.http.middlewares.rev-gateway-prefixes.stripprefix.prefixes=/backend"
    environment:
      EUREKA_URI: 'http://discovery:8083/eureka'
    depends_on:
      - discovery
  user-service:
    image: ghcr.io/revature-reverse/user-service:latest
    restart: unless-stopped
    environment:
      DB_URL: ${DB_URL}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET: ${SECRET}
      EUREKA_URI: 'http://discovery:8083/eureka'
    depends_on:
      - discovery
  post-service:
    image: ghcr.io/revature-reverse/post-service:latest
    restart: unless-stopped
    environment:
      DB_URL: ${DB_URL}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      EUREKA_URI: 'http://discovery:8083/eureka'
    depends_on:
      - discovery
  proxy:
    image: traefik
    restart: unless-stopped
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml
      - './traefik:/traefik'
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "80:80"
      - "443:443"
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    restart: unless-stopped
    volumes:
      - './logging/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro'
      - 'elasticsearch:/usr/share/elasticsearch/data'
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    restart: unless-stopped
    volumes:
      - './logging/kibana.yml:/usr/share/kibana/config/kibana.yml:ro'
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    ports:
      - "5601:5601"
  filebeat:
    build: 
      context: 'filebeat'
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # image: docker.elastic.co/beats/filebeat:${ELASTIC_VERSION}
    user: '0'
    restart: unless-stopped
    volumes:
      # - './logging/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro'
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
    

volumes:
  elasticsearch: {}
